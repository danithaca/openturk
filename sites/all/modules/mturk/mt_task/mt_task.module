<?php

/**
 * @file
 *   Amazon Mechanical Turk integration module file.
 */


/**
 * Implements hook_help().
 */
function mt_task_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mt_task':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This module enables <a href='@openturk'>Openturk.org</a> to process data from <a href='@amt'>Amazon Mechanical Turk</a>.", array('@openturk' => 'http://openturk.org', '@amt' => 'http://mturk.com')) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_mt_operations().
 * This hook is for mt_task to display a list of operations in a mt_task node.
 * The returned array follows the definition of hook_menu()
 */
function mt_task_mt_operations() {
  return array(
    'mt_task' => array(
      'get_balance()' => array(
        'title' => t('Get Balance'),
        'description' => t('Retrieve the balance of your AMT Requester account. Please see results in the command list table below. Use this operation to test this application.'),
      ),
      'load_all_hits()' => array(
        'title' => t('Load All HITs'),
        'description' => t('Load all HITs ever submitted to AMT from my account.'),
      ),
      'load_hits()' => array(
        'title' => t('Load HITs'),
        'description' => t('Load HITs into this site. Please specify hit_type_id in "MT Properties". Otherwise your latest HIT_TYPE would be loaded.'),
      ),
      'load_assignments()' => array(
        'title' => t('Load Assignments'),
        'description' => t('Load worker assignments for the HITs into the site. Please load HITs first. Run this command regularly to get updates from AMT.'),
      ),
    ),
  );
}


/**
 * Implements hook_menu();
 */
function mt_task_menu() {
  $items = array(
    'node/%/mt_operations' => array(
      'title' => 'AMT Operations',
      'description' => 'Operations you can do with this AMT task',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mt_task_view_operations_form'),
      'access callback' => 'mt_task_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    ),
  );
  return $items;
}

function mt_task_view_operations_form() {
  $task_id = arg(1);
  $operations = module_invoke_all('mt_operations');
  $options = array();
  $descriptions = array();
  foreach ($operations as $app_name => $app_ops) {
    foreach ($app_ops as $comm => $def) {
      $op = "{$app_name}:{$comm}";
      $options[$op] = $def['title'];
      $descriptions[$op] = array('#description' => $def['description']);
    }
  }
  
  $form['operations'] = array(
    '#type' => 'radios',
    '#title' => t('AMT Operations'),
    '#title_display' => 'invisible',
    '#description' => t('Please choose which operation you want to execute.'),
    '#options' => $options,
  );
  $form['operations'] = $form['operations'] + $descriptions;
  
  $form['task_id'] = array(
    '#type' => 'hidden',
    '#value' => $task_id, 
  );
    
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run'),
  );
    
  $app_names = array_keys($operations);
  $recent_command = async_command_retrieve_command_list($app_names, NULL, $task_id);
  $form['operations_history'] = array(
      '#markup' => theme('async_command_list', array('command_list' => $recent_command, 'cols' => array('uid','command','created','changed','status','message'))),
  );
  
  return $form;
}

function mt_task_view_operations_form_submit($form, &$form_state) {
  $op_array = explode(':', $form_state['values']['operations']);
  $app = $op_array[0];
  $command = $op_array[1];
  $task_id = $form_state['values']['task_id'];
  
  async_command_create_command($app, $command, array('eid'=>$task_id));
  // note: @command will be check_plain() automatically.
  drupal_set_message(t('We have put your request @command in the queue. It will be executed soon. Please refresh the page to see the update.', array('@command' => $command)));
  drupal_goto("node/$task_id/mt_operations");
}


/**
 * Implements hook_node_info().
 */
function mt_task_node_info() {
  return array(
    'mt_task' => array(
      'name' => t('Mechanical Turk Task'),
      'base' => 'mt_task',
      'description' => t('Each <em>MT Task</em> node represent a task on Amazon Mechanical Turk.'),
    )
  );
}

/**
 * Implements hook_form().
 */
function mt_task_form($node, $form_state) {
  return node_content_form($node, $form_state);
}


/**
 * Implements hook_permission()
 */
function mt_task_permission() {
  $perms = array(
    'administer mt_task' => array(
      'title' => t('Administer Mechanical Turk tasks'),
      'description' => t('You need to have this permission in order to administer any mt_task nodes'),
    ),
  );
  return $perms;
}

function mt_task_access($task_id) {
  if(user_access('administer mt_task') != TRUE) {
    return FALSE;
  }
  $node = node_load($task_id);
  if ($node->type != 'mt_task') {
    return FALSE;
  }
  if (!node_access('create', $node) && !node_access('edit', $node)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implementation of hook_node_view
 */
/*function mt_task_node_view($node, $view_mode, $langcode) {
  global $user;
  # TODO: this seems redundant to node access permission. consider remove it.
  if ($node->uid != $user->uid || !user_access('administer mt_task')) {
    // if no permission, then do nothing.
    return;
  }
  
  // only for 'full' view.
  if ($node->type == 'mt_task' && $view_mode == 'full' 
      && node_is_page($node) && empty($node->in_preview) ) {

    // generate the "operations" section
    $operations_orig = module_invoke_all('mt_operations');
    $operations = array();
    $app_id_set = array();
    // replace wildcard in hook_menu to be the node_id.
    foreach ($operations_orig as $path => $operation) {
      $operations[strtr($path, array('%' => $node->nid))] = $operation;
      if ($app_id = strstr($path, '/', TRUE)) {
        $app_id_set[] = $app_id;
      }
    }
    $node->content['mt_task_operations'] = array(
      '#markup' => theme('async_command_operations', array('operations' => $operations, 'title' => t('Amazon Mechanical Turk Operations'))),
      '#weight' => 1,
    );

    // display recent commands with this task
    $recent_command = async_command_retrieve_command_list(array_unique($app_id_set), NULL, $node->nid);
    $node->content['mt_task_command_list'] = array(
      '#markup' => theme('async_command_list', array('command_list' => $recent_command, 'cols' => array('uid','command','created','changed','status','message'))),
      '#weight' => 2,
    );
  }
}*/


/**
 * Implements hook_cron().
 */
function mt_task_cron() {
  // by default, avoid duplicate
  async_command_create_command('mt_task', 'update_worker()', array('uid' => 0));
}


/**
 * Implements hook_user_view
 */
function mt_task_user_view($account, $view_mode, $langcode) {
  $worker_id = encset_ini_get($account->mt_properties_secure, 'worker_id', NULL);
  if ($view_mode == 'full' && $worker_id != NULL) {
    $account->content['summary']['mt_worker_id'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('AMT Worker ID'),
      //'#description' => t('The worker ID from AMT. Only workers need to input this in the MT Properties box.'),
      '#markup' => $worker_id,
      //'#weight' => -1,
    );
  }
}