<?php

/**
 * @file
 *   Amazon Mechanical Turk integration module file.
 */


/**
 * Implements hook_help().
 */
function mt_task_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mt_task':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This module enables any Drupal website to process data from <a href='@amt'>Amazon Mechanical Turk</a>.", array('@amt' => 'http://mturk.com')) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_mt_operations().
 * This hook is for mt_task to display a list of operations in a mt_task node.
 * The returned array follows the definition of hook_menu()
 */
function mt_task_mt_operations() {
  return array(
    'mturk' => array(
      'GetBalance' => array(
        'title' => t('Get Balance'),
        'description' => t('Retrieve the balance of your AMT Requester account. Please see results in the command list table below. Use this operation to test this application.'),
      ),
      'LoadAllHits' => array(
        'title' => t('Load All HITs'),
        'description' => t('Load all HITs ever submitted to AMT from my account.'),
      ),
      'LoadHits' => array(
        'title' => t('Load HITs'),
        'description' => t('Load HITs into this site. Please specify hit_type_id in "MT Properties". Otherwise your latest HIT_TYPE would be loaded.'),
      ),
      'LoadAssignments' => array(
        'title' => t('Load Assignments'),
        'description' => t('Load worker assignments for the HITs into the site. Please load HITs first. Run this command regularly to get updates from AMT.'),
      ),
      'LoadAllAssignments' => array(
        'title' => t('Load All Assignments'),
        'description' => t('Load all worker assignments for the HITs into the site. Please load HITs first.'),
      ),
    ),
  );
}


/**
 * Implements hook_menu();
 */
function mt_task_menu() {
  $items = array(
    'node/%/mt_operations' => array(
      'title' => 'AMT Operations',
      'description' => 'Operations you can do with this AMT task',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mt_task_view_operations_form'),
      'access callback' => 'mt_task_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    ),
    'node/%/mt_message' => array(
      'title' => 'AMT Message',
      'description' => 'Allow requesters to send messages to designated workers.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mt_task_message_form'),
      'access callback' => 'mt_task_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 11,
    ),
  );
  return $items;
}

function mt_task_view_operations_form() {
  $task_id = arg(1);
  $operations = module_invoke_all('mt_operations');
  $options = array();
  $descriptions = array();
  foreach ($operations as $app_name => $app_ops) {
    foreach ($app_ops as $comm => $def) {
      // attention: in async_command 2.0 structure, we use Mturk app for all commands.
      //$op = "mturk:{$comm}";
      $op = "{$app_name}:{$comm}";
      $options[$op] = $def['title'];
      $descriptions[$op] = array('#description' => $def['description']);
    }
  }
  
  $form['operations'] = array(
    '#type' => 'radios',
    '#title' => t('AMT Operations'),
    '#title_display' => 'invisible',
    '#description' => t('Please choose which operation you want to execute.'),
    '#options' => $options,
  );
  $form['operations'] = $form['operations'] + $descriptions;
  
  $form['task_id'] = array(
    '#type' => 'hidden',
    '#value' => $task_id, 
  );
    
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run'),
  );

  // show history
  $commands_view = views_get_view('amt_commands');
  $form['history'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    //'#collapsed' => FALSE,
    '#title' => $commands_view->get_title(),
    '#description' => t('Display the list of MTurk commands issued.'),
  );

  $form['history']['commands'] = array(
    '#markup' => views_embed_view('amt_commands'),
  );

  
  return $form;
}

function mt_task_view_operations_form_submit($form, &$form_state) {
  $op_array = explode(':', $form_state['values']['operations']);
  $app = $op_array[0];
  $command = $op_array[1];
  $task_id = $form_state['values']['task_id'];
  
  $operations = module_invoke_all('mt_operations');

  if (isset($operations[$app][$command]['callback function'])) {
    // attention: here we use callbacks defined in mt_operations to execute command.
    $callback = $operations[$app][$command]['callback function'];
    $parameters = $operations[$app][$command]['callback arguments'];
    // note: drupal_get_form() doesn't work. you can only goto a page that has a form in it.
    call_user_function_array($callback, $parameters);
    //drupal_goto("node/$task_id/mt_bonus");
  }
  else {
    async_command_create_command($app, $command, NULL, array('eid'=>$task_id));
    // note: @command will be check_plain() automatically.
    drupal_set_message(t('We have put your request @command in the queue. It will be executed soon. Please refresh the page to see the update.', array('@command' => $command)));
    drupal_goto("node/$task_id/mt_operations");
  }
}


function mt_task_message_form() {
  $task_id = arg(1);
  $form = array();
  
  $results = db_query('SELECT w.worker_id, w.display_name, count(*) AS total_assignments FROM {mt_worker} w INNER JOIN {mt_assignment} a ON w.worker_id = a.worker_id
  	INNER JOIN {mt_task_hit} t ON a.hit_id = t.hit_id WHERE t.task_id=:task_id GROUP BY w.worker_id, w.display_name ORDER BY w.display_name', array(':task_id' => $task_id));
  $workers = array();
  foreach ($results as $result) {
    $workers[$result->worker_id] = "{$result->display_name} ({$result->worker_id})";
  }
  
  // if no workers, then simply return a message.
  if (count($workers) == 0) {
    $form['no_valid_message'] = array(
      '#markup' => '<p>'. t('There are no workers who have worked on this task. Cannot send messages.') .'</p>',
    );
    return $form;
  }
  
  $form['recipients'] = array(
    '#title' => t('Please select the worker to send the message'),
    //'#description' => t(''),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $workers,
    '#required' => TRUE,
  );
  
  $form['message_subject'] = array(
    '#title' => t('Subject'),
    //'#description' => t(''),
    '#type' => 'textfield',
    '#maxlength' => 200,
    '#required' => TRUE,
  );
  
  $form['message_body'] = array(
    '#title' => t('Message'),
    '#type' => 'textarea',
    '#required' => TRUE,
    '#maxlength' => 1000,
  );

  $form['task_id'] = array(
    '#type' => 'hidden',
    '#value' => $task_id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send message'),
  );
  
  return $form;
}

function mt_task_message_form_submit($form, &$form_state) {
  $task_id = $form_state['values']['task_id'];
  $recipients = $form_state['values']['recipients'];
  $message_subject = $form_state['values']['message_subject'];
  $message_body = $form_state['values']['message_body'];

  $id = db_insert('mt_message')->fields(array(
    'task_id' => $task_id,
    'subject' => $message_subject,
    'message' => $message_body,
    'created' => time(),
  ))->execute();
  
  $query = db_insert('mt_message_worker')->fields(array('message_id', 'worker_id'));
  foreach ($recipients as $worker_id) {
    $query->values(array(
      'message_id' => $id,
      'worker_id' => $worker_id,
    ));
  }
  $query->execute();

  // create the command
  $execution_id = async_command_create_command('mturk', "SendMessage", "Message: $message_subject", array('eid'=>$task_id, 'id1'=>$id));

  db_update('mt_message')
    ->fields(array('execution_id' => $execution_id))
    ->condition('message_id', $id)
    ->execute();

  drupal_set_message('You message is in the queue, will get sent soon.');
}


/**
 * Implements hook_node_info().
 */
function mt_task_node_info() {
  return array(
    'mt_task' => array(
      'name' => t('Mechanical Turk Task'),
      'base' => 'mt_task',
      'description' => t('Each <em>MT Task</em> node represent a task on Amazon Mechanical Turk.'),
    )
  );
}

/**
 * Implements hook_form().
 */
function mt_task_form($node, $form_state) {
  return node_content_form($node, $form_state);
}


/**
 * Implements hook_permission()
 */
function mt_task_permission() {
  $perms = array(
    'administer mt_task' => array(
      'title' => t('Administer Mechanical Turk tasks'),
      'description' => t('You need to have this permission in order to administer any mt_task nodes'),
    ),
  );
  return $perms;
}

function mt_task_access($task_id) {
  if(user_access('administer mt_task') != TRUE) {
    return FALSE;
  }
  $node = node_load($task_id);
  if ($node->type != 'mt_task') {
    return FALSE;
  }
  if (!node_access('create', $node) && !node_access('edit', $node)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implementation of hook_node_view
 */
/*function mt_task_node_view($node, $view_mode, $langcode) {
  global $user;
  # TODO: this seems redundant to node access permission. consider remove it.
  if ($node->uid != $user->uid || !user_access('administer mt_task')) {
    // if no permission, then do nothing.
    return;
  }
  
  // only for 'full' view.
  if ($node->type == 'mt_task' && $view_mode == 'full' 
      && node_is_page($node) && empty($node->in_preview) ) {

    // generate the "operations" section
    $operations_orig = module_invoke_all('mt_operations');
    $operations = array();
    $app_id_set = array();
    // replace wildcard in hook_menu to be the node_id.
    foreach ($operations_orig as $path => $operation) {
      $operations[strtr($path, array('%' => $node->nid))] = $operation;
      if ($app_id = strstr($path, '/', TRUE)) {
        $app_id_set[] = $app_id;
      }
    }
    $node->content['mt_task_operations'] = array(
      '#markup' => theme('async_command_operations', array('operations' => $operations, 'title' => t('Amazon Mechanical Turk Operations'))),
      '#weight' => 1,
    );

    // display recent commands with this task
    $recent_command = async_command_retrieve_command_list(array_unique($app_id_set), NULL, $node->nid);
    $node->content['mt_task_command_list'] = array(
      '#markup' => theme('async_command_list', array('command_list' => $recent_command, 'cols' => array('uid','command','created','changed','status','message'))),
      '#weight' => 2,
    );
  }
}*/


/**
 * Implements hook_cron().
 */
function mt_task_cron() {
  // by default, avoid duplicate
  async_command_create_command('mt_task', 'UpdateWorker', array('uid' => 0));
  // mt_task_assign_role();
}


/**
 * Implements hook_user_view
 */
function mt_task_user_view($account, $view_mode, $langcode) {
  $worker_id = encset_ini_get($account->mt_properties_secure, 'worker_id', NULL);
  if ($view_mode == 'full' && $worker_id != NULL) {
    $account->content['summary']['mt_worker_id'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('AMT Worker ID'),
      //'#description' => t('The worker ID from AMT. Only workers need to input this in the MT Properties box.'),
      '#markup' => $worker_id,
      //'#weight' => -1,
    );
  }
}

// not fully tested.
function mt_task_assign_role() {
  $worker_role = user_role_load_by_name('worker');
  $requester_role = user_role_load_by_name('requester');

  if (!empty($worker_role) && !empty($requester_role)) {
		$uid_array = db_select('users','u')
			->fields('u', array('uid'))
			->condition('u.uid', 0, '<>')
			->execute()
			->fetchCol();

    $workers = array();
    $requesters = array();
		foreach ($uid_array as $uid) {
      $user_info = user_load($uid);
			if (encset_ini_get($user_info->mt_properties_secure, 'worker_id', FALSE)) {
        $workers[] = $uid;
        //db_merge('users_roles')
        //  ->key(array('uid' => $user_info->uid, 'rid' => $worker_role->rid))
        //  ->fields(array('uid' => $user_info->uid, 'rid' => $worker_role->rid))
        //  ->execute();
			}
      if (encset_ini_get($user_info->mt_properties_secure, 'access_key', FALSE) &&
          encset_ini_get($user_info->mt_properties_secure, 'secret_key', FALSE)) {
        $requesters[] = $uid;
        //db_merge('users_roles')
        //  ->key(array('uid' => $user_info->uid, 'rid' => $requester_role->rid))
        //  ->fields(array('uid' => $user_info->uid, 'rid' => $requester_role->rid))
        //  ->execute();
      }
		}

    user_multiple_role_edit($workers, 'add_role', $worker_role->rid);
    user_multiple_role_edit($requesters, 'add_role', $requester_role->rid);
  }
}


/**
 * Implements hook_views_api().
 */
function mt_task_views_api() {
  return array(
    'api' => 3,
  );
}