<?php 

/**
 * Grant bonus to AMT workers
 */

/**
 * Implements hook_menu().
 */
function mt_bonus_menu() {
  return array(
    'node/%/mt_bonus' => array(
      'title' => 'AMT Bonus',
      'description' => 'Allow requesters to grant bonus to designated workers.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mt_bonus_grant_form'),
      'access callback' => 'mt_task_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 12,
    ),
  );
}

function mt_bonus_grant_form() {
  $task_id = arg(1);
  $form = array();
  
  $results = db_query('SELECT w.worker_id, w.display_name, count(*) AS total_assignments FROM {mt_worker} w INNER JOIN {mt_assignment} a ON w.worker_id = a.worker_id
  	INNER JOIN {mt_task_hit} t ON a.hit_id = t.hit_id WHERE t.task_id=:task_id GROUP BY w.worker_id, w.display_name ORDER BY w.display_name', array(':task_id' => $task_id));
  $workers = array();
  foreach ($results as $result) {
    $workers[$result->worker_id] = "{$result->display_name} ({$result->worker_id})";
  }
  
  // if no workers, then simply return a message.
  if (count($workers) == 0) {
    $form['no_valid_message'] = array(
      '#markup' => '<p>'. t('There are no workers who have worked on this task. Cannot grant bonus.') .'</p>',
    );
    return $form;
  }
  
  $form['worker_id'] = array(
    '#title' => t('Please select the worker to grant bonus'),
    //'#description' => t(''),
    '#type' => 'select',
    '#options' => $workers,
    '#required' => TRUE,
  );
  
  $form['bonus_amount'] = array(
    '#title' => t('Bonus amount'),
    //'#description' => t(''),
    '#type' => 'textfield',
    '#size' => 4,
    '#required' => TRUE,
    '#element_validate' => array('_element_validate_number'),
    '#field_prefix' => '$',
  );
  
  /*$form['assignment_id'] = array(
    '#title' => t('Which assignment this bonus is for'),
    '#description' => t('Select any or the last assignment this worker submitted to this task to which the bonus is for.'),
    '#type' => 'radios',
  	'#options' => array('any' => t('Any'), 'last' => t('Last')),
    '#default_value' => 'any',
  );*/
  
  $form['message'] = array(
    '#title' => t('Optional message to the worker'),
    '#type' => 'textarea',
    '#required' => FALSE,
    '#default_value' => '',
  );

  $form['task_id'] = array(
    '#type' => 'hidden',
    '#value' => $task_id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Grant bonus'),
  );
  
  return $form;
}

function mt_bonus_grant_form_submit($form, &$form_state) {
  $task_id = $form_state['values']['task_id'];
  $worker_id = $form_state['values']['worker_id'];
  $bonus_amount = $form_state['values']['bonus_amount'];
  $message = $form_state['values']['message'];

  $query = db_select('mt_assignment', 'a');
  $query->innerJoin('mt_task_hit', 't', 'a.hit_id=t.hit_id');
  $query->fields('a', array('assignment_id'));
  $query->condition('t.task_id', $task_id);
  $query->condition('a.worker_id', $worker_id);
  $query->orderRandom();
  $query->range(0, 1);
  $assignment_id = $query->execute()->fetchField();

  mt_bonus_grant($task_id, $worker_id, $bonus_amount, $assignment_id, $message);
  drupal_set_message('You request to grant bonus has been submitted.');
  //drupal_goto("node/{$task_id}/mt_bonus");
}


function mt_bonus_grant($task_id, $worker_id, $bonus_amount, $assignment_id, $message) {
  $id = db_insert('mt_bonus')->fields(array(
    'task_id' => $task_id,
    'worker_id' => $worker_id,
    'bonus_amount' => $bonus_amount,
    'assignment_id' => $assignment_id,
    'message' => $message,
    'created' => time(),
  ))->execute();

  // create the command
  $execution_id = async_command_create_command('mt_bonus', "grant_bonus({$id}) # amount:{$bonus_amount}", array('eid'=>$task_id));

  db_update('mt_bonus')
    ->fields(array('execution_id' => $execution_id))
    ->condition('bonus_id', $id)
    ->execute();
}


/**
 * Implements hook_mt_operations().
 */
function mt_bonus_mt_operations() {
  // no real operations, but the command will show in command history.
  return array(
    'mt_bonus' => array(),
  );
}
/*function mt_bonus_mt_operations() {
  return array(
    'mt_bonus' => array(
      'grant_bonus' => array(
  		'title' => t('Grant Bonus'),
        'description' => t('Allow requesters to grant bonus to designated workers.'),
        'callback function' => 'drupal_get_form',
        'callback arguments' => array('mt_bonus_grant_form'),
      ),
    ),
  );
}*/
